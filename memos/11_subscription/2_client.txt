--------------------------------------------------------

클라이언트는 아래것 하나만 깔면 됨
> yarn add graphql-ws

--------------------------------------------------------

=> Apollo Client 설정
=> split을 통해 Link의 분기처리를 담당
=> wsLink생성시 connectionParams을 설정하여
   초기화시 전달할 access_token을 설정

import {
  ApolloClient,
  ApolloLink,
  concat,
  createHttpLink,
  InMemoryCache,
  split,
} from '@apollo/client';
import { GraphQLWsLink } from '@apollo/client/link/subscriptions';
import { createClient as createWsClient } from 'graphql-ws';
import { getAccessToken } from '../auth';
import { getMainDefinition } from '@apollo/client/utilities';
import { Kind, OperationTypeNode } from 'graphql';

const authLink = new ApolloLink((operation, forward) => {
  const accessToken = getAccessToken();
  if (accessToken) {
    operation.setContext({
      headers: { Authorization: `Bearer ${accessToken}` },
    });
  }
  return forward(operation);
});

const httpLink = concat(
  authLink,
  createHttpLink({ uri: 'http://localhost:9000/graphql' })
);

const wsLink = new GraphQLWsLink(
  createWsClient({
    url: 'ws://localhost:9000/graphql',
    connectionParams: () => ({ accessToken: getAccessToken() }),
  })
);

const isSubscription = (operation) => {
  const definition = getMainDefinition(operation.query);

  return (
    definition.kind === Kind.OPERATION_DEFINITION &&
    definition.operation === OperationTypeNode.SUBSCRIPTION
  );
};

export const apolloClient = new ApolloClient({
  link: split(isSubscription, wsLink, httpLink),
  cache: new InMemoryCache(),
});

--------------------------------------------------------

=> useSubscription 훅을 통해 실시간 메시지를 받음
=> onData에서 받은 메시지를 처리

export const messageAddedSubscription = gql`
  subscription MessageAddedSubscription {
    messageAdded {
      id
      user
      text
    }
  }
`;

useSubscription(messageAddedSubscription, {
  onData: ({ client, data }) => {
    const newMessage = data.data.messageAdded;

    client.cache.updateQuery({ query: messagesQuery }, ({ messages }) => {
      return {
        messages: [...messages, newMessage],
      };
    });
  },
});

--------------------------------------------------------

크롬 개발자도구 WS에서 웹소켓에 대한 디버깅이 가능

--------------------------------------------------------