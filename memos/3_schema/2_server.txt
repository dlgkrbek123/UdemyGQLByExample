--------------------------------------------------------

> yarn add @apollo/server graphql

expressMiddleware로 Apollo Server를 
express의 일부로 삽입

--------------------------------------------------------

미들웨어는 중간에 흐름을 가로채서 입출력을 변조가능
여러개 사용가능

요청/응답 <=> Auth <=> JSON <=> handler

--------------------------------------------------------

=> 아폴로서버를 실행시키고 미들웨어로 /graphql일때 동작하게 설정

const apolloServer = new ApolloServer({
  typeDefs,
  resolvers,
});
await apolloServer.start();

app.use('/graphql', apolloMiddleware(apolloServer));
app.listen({ port: PORT }, () => {
  console.log(`Server running on port ${PORT}`);
});

--------------------------------------------------------

.graphql 파일은 SDL파일

아래와 같은 방식으로 Custom Ojbect Type을 정의

type Job {
  id: ID!
  title: String
  description: String
}

--------------------------------------------------------

Graphql은 5개의 Scalar타입을 지원
  Int, Float, String, Boolean, ID

커스텀 스칼라 타입도 추가가능

--------------------------------------------------------

nullability
=> null은 값이 available하지 않다는 걸 의미
=> 기본이 nullable

=> 필드뒤에 !를써서 non-nullable
=> query시 반드시 내려줄 필요는 없는데 서버는 항상 내려줘야함

--------------------------------------------------------

배열은 아래와 같이 정의

type Query {
  jobs: [Job]
}

배열의 요소가 non-nullable

type Query {
  jobs: [Job!]
}

--------------------------------------------------------

/data/db.sqlite3가 데이터를 가지고 있음 (binary)
knex는 코드빌더

!! SQLite Viewer 익스텐션으로 파일내의 데이터를 확인가능 !!

--------------------------------------------------------

Field Resolver
=> 특정 필드에 대해 Resolver를 지정가능
=> TypeName에 해당하는 객체를 Query와 별도로 추가
   field에 대한 명시

export const resolvers = {
  Query: {
    job: () => {
      return {
        id: 'test-id',
        title: 'The Title',
        description: 'The description',
      };
    },

    jobs: () => getJobs(),
  },

  Job: {
    date: () => `2022-12-31`,
  },
};

--------------------------------------------------------

Resolver Chain
=> 클라이언트에서 요청 인입
=> 쿼리를 탑다운 식으로 traversing하면서 data를 구축
=> 요청을 파싱하여 내려가면서 구축
  => jobs의 경우 빈 배열 3개로 채워놓음
  => id는 필드 리졸버가 없으므로 context의 값을 리졸빙
  => date의 경우 필드 리졸버가 있으므로 호출해서 리졸빙
  => 리졸빙 못하면 null을 리턴 => non-nullable이면 에러발생

query {
  jobs {
    id
    date
  }
}

--------------------------------------------------------

스키마 정의 후 플레이그라운드에서 확인시 필드에 대한 설명이 없다.
아래와 같은 Documentation Comment를 사용하면 주석을 입력가능
마크다운 문법을 적용가능


"""
Represents a job ad posted to our board
"""
type Job {
  """
  객체의 ID
  """
  id: ID!
  date: String!
  title: String!
  description: String
}

--------------------------------------------------------